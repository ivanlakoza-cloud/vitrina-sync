name: Deploy to Yandex Cloud (1 VM)

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths:
      - 'app/**'
      - 'components/**'
      - 'lib/**'
      - 'public/**'
      - 'next.config.*'
      - 'Dockerfile'
      - 'deploy/yandex-single-vm/**'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - 'yarn.lock'
      - 'package-lock.json'

# чтобы новый деплой отменял предыдущий в той же ветке
concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Ensure clean ~/app/src on VM (keep deploy/.env)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.YC_VM_HOST }}
          username: ${{ secrets.YC_VM_USER }}
          key: ${{ secrets.YC_VM_SSH_KEY }}
          script: |
            set -e
            mkdir -p ~/app/src
            rm -rf ~/app/src/*

      - name: Copy repo to VM (to ~/app/src)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.YC_VM_HOST }}
          username: ${{ secrets.YC_VM_USER }}
          key: ${{ secrets.YC_VM_SSH_KEY }}
          source: "."
          target: "~/app/src"
          overwrite: true
          rm: true
          exclude: |
            .git*
            .github/*
            node_modules/*
            **/.next/*
            **/dist/*
            **/*.log
            .env
            **/.env
            **/.env.*

      - name: Build & restart containers on VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.YC_VM_HOST }}
          username: ${{ secrets.YC_VM_USER }}
          key: ${{ secrets.YC_VM_SSH_KEY }}
          script: |
            set -e
            DEPLOY_DIR=~/app/deploy/yandex-single-vm
            SRC_DIR=~/app/src

            mkdir -p "$DEPLOY_DIR"

            # Создаём .env один раз (без here-doc, чтобы не ловить YAML-отступы)
            if [ ! -f "$DEPLOY_DIR/.env" ]; then
              printf '%s\n' \
                'NODE_ENV=production' \
                'PORT=3000' \
                'NEXT_PUBLIC_SITE_URL=https://vitran.ru' \
                'NEXT_TELEMETRY_DISABLED=1' \
                > "$DEPLOY_DIR/.env"
            fi

            # Копируем compose и Caddyfile из репозитория в папку деплоя
            cp -f "$SRC_DIR/deploy/yandex-single-vm/docker-compose.yml" "$DEPLOY_DIR/docker-compose.yml"
            cp -f "$SRC_DIR/deploy/yandex-single-vm/Caddyfile"        "$DEPLOY_DIR/Caddyfile"

            # Сборка и перезапуск
            cd "$DEPLOY_DIR"
            docker compose up -d --build --remove-orphans
            docker image prune -f
